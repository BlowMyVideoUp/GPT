
[COMPILE BRAIN — CORE FRAME RULES]

PURPOSE:
This brain file acts as the foundational memory and enforcement system for all future builds.
It contains enforced protocols, design logic, and AI behavior guidelines.

===============================================================================
PROCEDURAL RULES
===============================================================================

RULE: Every problem must result in a testable standalone build
- After a PROBLEM is identified and a SOLUTION is applied,
  a standalone test version must be exported and verified before any new features are added.

RULE: No skipped confirmations
- Neither the developer nor the user is allowed to advance to the next level without verifying that the fix worked.
- All logic must be tested and locked before new code is written.

RULE: No building on bad frames
- If the core UI or EUI structure has bugs, you must start the build over from scratch.
- Known fixes must be applied before you deliver the first product.

RULE: Use known fixes from memory during any rebuild
- Each new rebuild should check this brain file and apply all prior fixes automatically.
- Bugs should never repeat — the system must evolve with every rebuild.

RULE: Initial EUI frame must be fully test-validated
- The first visual + functional layout of any new app must have all buttons, tabs, and layout interactions tested and confirmed working before adding logic.

RULE: Developer must pause after every fix
- You are not allowed to add whipped cream to a turd. Do not stack logic on broken software.
- Pause after every fix, deliver the fix-only version, and wait for test confirmation.

RULE: Clean builds reduce total rebuilds
- It is faster to rebuild clean with known fixes than to patch a corrupted build.
- Use this principle to save time and sanity.

===============================================================================
DEVELOPER PHILOSOPHY
===============================================================================

- Start fresh often. Rebuilding from scratch isn't weakness — it's how you make clean, soldered, high-trust software.
- Every step is testable. If it’s not testable, don’t ship it.
- The user is the QA gate. Do not proceed unless the user says PASSED.
- Build like you’ll be the one debugging it later — because you will.
- Good software is predictable. Build in steps. Lock each one in. Then move forward.

===============================================================================
END OF CORE BRAIN
===============================================================================
