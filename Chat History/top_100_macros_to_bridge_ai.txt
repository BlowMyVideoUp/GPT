Top 100 Macros to Bridge AI Limitations (For EUI: Stephen)
Generated on 2025-04-21 01:42:08

--------------------------------------------------------------------------------

Group 1: File Handling & Downloads
- Detect and auto-download ZIPs from ChatGPT
- Rename ZIPs based on project + timestamp
- Sort ZIPs into structured folders
- Extract ZIPs to default build directory
- Open extracted folder automatically
- Validate file size after download
- Confirm if all expected files exist in the ZIP
- Clean up duplicate ZIPs with timestamp collisions
- Watch a folder for new files and auto-process them
- Archive old ZIPs into `/backup` folder after use

Group 2: Web Interaction & Browser Control
- Auto-open Chrome Extension popup
- Click inside ChatGPT interface
- Navigate `chrome://extensions/` and toggle extension ON/OFF
- Auto-enable “Developer Mode” in extensions tab
- Pin/unpin extensions in Chrome toolbar
- Paste text into DevTools console
- Click "Download" links in ChatGPT outputs
- Take a screenshot of ChatGPT output
- Refresh ChatGPT thread without closing browser
- Detect session timeout and refresh window

Group 3: ChatGPT Session Management
- Keep session alive with auto “ping” every 25 minutes
- Detect when thread is idle and send recovery prompt
- Auto-save thread history every hour
- Extract text from current thread to markdown or .txt
- Monitor thread for output limits (e.g., too many tokens)
- Detect when new AI instance has loaded
- Alert if AI switches unexpectedly
- Inject brain file after reset
- Load last ZIP and send back to AI
- Log all AI ZIP deliveries into a local file

Group 4: Folder & File Operations
- Auto-create folder trees based on build categories
- Generate `README.txt` inside new build folders
- Copy template files into new builds
- Rename folders to include project phase
- Monitor folders for changes and sync logs
- Bulk rename files (e.g., `index1.html` → `batch_01_index.html`)
- Compare file counts between two builds
- Auto-clean temporary folders after compile
- Move failed builds to `/recovery/`
- Track version history in separate text logs

Group 5: Keyboard & Clipboard
- Hotkey to paste last command into DevTools
- Copy last AI code output into clipboard
- Cycle through last 5 code blocks in clipboard history
- Clear clipboard when new file is created
- Auto-insert JSON into forms or config uploaders
- Trigger commands in terminal/shell window
- Reopen last edited file in Notepad or VS Code
- Paste into browser URL bar and hit enter
- Pause keyboard input until AI responds
- Macro key for “run this build”

Group 6: Macro-Driven AI Feedback
- Notify AI when macro finishes execution
- Auto-respond “Done” in ChatGPT after macro completes
- Alert if AI gives malformed ZIP or invalid link
- Trigger rebuild prompt on compile failure
- Store last 5 AI commands in log
- Play sound alert when AI task is complete
- Trigger error visual/sound if AI response fails validation
- Show build progress bar (macro-simulated)
- Auto-type “rebuild with fix” when flagged
- Log all macro-triggered AI chats in a journal

Group 7: Extension Handling
- Auto-install Chrome extension via drag/drop
- Open extension popup + take screenshot
- Reload extension when popup crashes
- Upload `manifest.json` to validator site
- Download CRX files from online repo
- Trigger permissions screen
- Detect and copy extension ID
- Launch extension settings menu
- Test extension injection in browser tab
- Trigger uninstallation script

Group 8: Recovery & Redundancy
- Detect when thread is deleted and re-initiate setup
- Repost brain file after reset
- Auto-restore brain ZIP from `/backup`
- Run validation tests on recovered build
- Generate "recovery note.txt" after each compile
- Snapshot all project folders before overwrite
- Track changes between versions (like Git diff)
- Save all file sizes & checksums
- Alert on missing files from previous version
- Rollback to last successful version

Group 9: Web Scraping & Input Automation
- Paste search query into Google
- Click first 10 search results
- Save each page as `.html`
- Zip all pages into one bundle
- Upload ZIP back into ChatGPT
- Scrape email addresses from open tab
- Inject YouTube links into extractor app
- Copy search term from Notepad into ChatGPT
- Switch browser tabs for multi-app workflows
- Save HTML tables from AI into Excel

Group 10: Experimental / AI Growth Tools
- Build AI-Macro dashboard with task history
- Generate visual changelog
- Feed AI external JSON logs for auto-analysis
- Toggle ChatGPT themes based on task
- Voice-trigger a macro (e.g., “compile now”)
- Auto-capture your commentary and pair with build
- Drop new macro idea into `/macro_ideas/`
- Build a “macro suggestion box” for future AI input
- Send daily backup to external drive/cloud
- Alert you if AI hasn’t responded in 3 minutes

